project_spec:
  meta:
    project_name: "banner-splitter"
    version: "0.1.0"
    license: "MIT"
    author: "auto-generated by AI"
    purpose: |
      Local-only web application that ingests an existing banner (PNG/JPG),
      automatically detects text, product object(s), and optional decorations,
      generates a high-quality in-painted background, and outputs four pixel-perfect
      PNG layers (text / product / decoration / background) plus a combined banner.
      The whole codebase follows strict Test-Driven Development (TDD):
        • every functional requirement has one or more failing tests first
        • implementation code is written only to make the tests pass
        • CI (GitHub Actions) runs all tests on every push & pull-request
      All tasks are tracked as GitHub Issues generated from this spec; completed tasks
      are linked to pull-requests, and running progress is kept in docs/progress.md.

  runtime_requirements:
    python: ">=3.10,<3.12"
    system_packages:
      - build-essential
      - tesseract-ocr
      - tesseract-ocr-jpn
      - libgl1
    python_packages:
      - opencv-python-headless>=4.8
      - pytesseract>=0.3.10
      - torch>=2.1.0
      - torchvision>=0.16
      - diffusers[torch]>=0.23.0
      - transformers>=4.40
      - pillow>=10.2
      - fastapi>=0.110
      - uvicorn[standard]>=0.29
      - pydantic>=2.7
      - python-multipart>=0.0.9
      - aiofiles>=23
      - sqlite-utils>=3.36
      - typer[all]>=0.9
      - tqdm>=4.66
      - pytest>=8.2
      - pytest-cov>=4
      - httpx>=0.27         # API test client
      - pre-commit>=3.7
    gpu_optional:
      cuda_toolkit: ">=12.0"

  directory_layout:
    root: .
    tree: |
      .
      ├── app/                          # FastAPI backend & AI engines
      │   ├── main.py                   # FastAPI entry-point
      │   ├── config.py                 # settings via pydantic.BaseSettings
      │   ├── models/                   # downloaded model weights (.gitignore)
      │   ├── services/                 # core AI logic
      │   │   ├── ocr.py
      │   │   ├── detect_product.py
      │   │   ├── detect_decoration.py
      │   │   └── inpaint.py
      │   ├── utils/
      │   │   ├── mask_utils.py
      │   │   ├── image_io.py
      │   │   └── bbox_io.py
      │   └── routers/                  # REST endpoints
      │       ├── upload.py
      │       ├── process.py
      │       ├── status.py
      │       └── download.py
      ├── frontend/                     # React + Vite + Konva
      │   ├── src/
      │   │   ├── App.tsx
      │   │   ├── api.ts
      │   │   ├── pages/
      │   │   └── components/
      │   └── vite.config.ts
      ├── data/
      │   ├── uploads/
      │   ├── masks/
      │   ├── outputs/
      │   └── db.sqlite3
      ├── scripts/
      │   ├── download_weights.sh
      │   └── init_db.py
      ├── tests/                        # TDD first: failing tests reside here
      │   ├── api/
      │   │   ├── test_upload.py
      │   │   ├── test_process.py
      │   │   └── test_download.py
      │   └── unit/
      │       ├── test_ocr.py
      │       ├── test_detect_product.py
      │       ├── test_inpaint.py
      │       └── test_layer_gen.py
      ├── docs/
      │   ├── progress.md               # running changelog of completed tasks
      │   └── architecture.md
      ├── .github/
      │   ├── ISSUE_TEMPLATE/
      │   │   └── task.yml
      │   ├── PULL_REQUEST_TEMPLATE.md
      │   └── workflows/
      │       ├── ci.yml
      │       └── auto_issue.yml
      ├── Dockerfile
      ├── docker-compose.yml
      ├── .pre-commit-config.yaml
      ├── .env.example
      ├── requirements.txt
      ├── README.md
      └── LICENSE

  docker:
    compose: |
      version: "3.9"
      services:
        backend:
          build: .
          container_name: banner-splitter-back
          ports: ["8000:8000"]
          volumes:
            - ./data:/workspace/data
          environment:
            - PYTHONUNBUFFERED=1
          command: >
            uvicorn app.main:app --host 0.0.0.0 --port 8000
        frontend:
          image: node:20-bullseye
          container_name: banner-splitter-front
          working_dir: /frontend
          volumes:
            - ./frontend:/frontend
          command: ["npm","run","dev","--","--host","0.0.0.0"]
          ports: ["5173:5173"]
          depends_on: [backend]

  env_setup:
    steps:
      - step: Clone
        cmd: git clone <repo_url> && cd banner-splitter
      - step: DownloadWeights
        cmd: bash scripts/download_weights.sh
      - step: DockerUp
        cmd: docker compose up --build
      - step: InitDB
        cmd: docker compose exec backend python scripts/init_db.py
      - step: RunTests
        cmd: docker compose exec backend pytest -q

  api_contract:
    base_url: http://localhost:8000
    swagger: "/docs"
    endpoints:
      upload:
        path: /upload
        method: POST
        request: multipart/form-data {file}
        response: {upload_id: uuid, filename: str}
      process:
        path: /process/{upload_id}
        method: POST
        body: {detect_text: bool, detect_product: bool, detect_decoration: bool}
        response: {task_id: uuid, status: processing}
      status:
        path: /status/{task_id}
        method: GET
        response: {progress: int, status: pending|running|completed|failed, message: str}
      download:
        path: /download/{task_id}
        method: GET
        response: {zip_path: str, files: {...}}

  processing_pipeline:
    - stage: OCR
      module: app.services.ocr:run
      output: text_mask.png
    - stage: DetectProduct
      module: app.services.detect_product:run
      output: product_mask.png
    - stage: DetectDecoration
      module: app.services.detect_decoration:run (optional)
      output: decoration_mask.png
    - stage: Inpaint
      module: app.services.inpaint:run
      input_masks: [text_mask (+optional)]
      output: background_layer.png
    - stage: LayerGenerate
      module: app.utils.image_io:generate_layers
      output: text_layer.png, product_layer.png, decoration_layer.png, background_layer.png, combined_banner.png

  datastore:
    engine: sqlite
    file: data/db.sqlite3
    schema_sql: |
      CREATE TABLE IF NOT EXISTS uploads (
        id TEXT PRIMARY KEY,
        filename TEXT,
        created_at TEXT
      );
      CREATE TABLE IF NOT EXISTS tasks (
        id TEXT PRIMARY KEY,
        upload_id TEXT,
        status TEXT,
        progress INTEGER,
        started_at TEXT,
        ended_at TEXT,
        FOREIGN KEY(upload_id) REFERENCES uploads(id)
      );

  tests:
    philosophy: |
      • Write failing unit test → implement minimal code → make test pass
      • Every public endpoint and service has at least one test
    tooling:
      - pytest
      - pytest-cov
      - httpx (async test client)
    coverage_threshold: 90
    sample_cases:
      - unit/test_ocr.py : asserts >90 % char recall on fixtures/*
      - unit/test_inpaint.py : asserts returned image has no alpha + same dimension
      - api/test_upload.py : 200 OK and json keys
      - api/test_process.py : polling reaches completed

  github_integration:
    issue_template: |
      name: "Task"
      description: "Atomic implementation task generated from spec"
      body:
        - type: markdown
          attributes:
            value: |
              **Sub-module**: <!-- e.g. OCR / Inpaint / API -->
              **Definition of Done**:
              - [ ] failing test exists
              - [ ] code implemented
              - [ ] tests pass
              - [ ] documentation updated
    pull_request_template: |
      ### What & Why
      <!-- describe feature/fix -->
      ### Checklist
      - [ ] unit tests pass
      - [ ] api tests pass
      - [ ] coverage ≥ 90 %
      - [ ] progress.md updated
    workflows:
      ci: |
        name: CI
        on: [push, pull_request]
        jobs:
          test:
            runs-on: ubuntu-latest
            steps:
              - uses: actions/checkout@v4
              - uses: actions/setup-python@v5
                with: {python-version: '3.11'}
              - run: pip install -r requirements.txt
              - run: pytest --cov=app --cov-report=xml
      auto_issue: |
        name: Auto-Issue from TODO
        on:
          push:
            paths: ["app/**/*.py"]
        jobs:
          todo:
            runs-on: ubuntu-latest
            steps:
              - uses: actions/checkout@v4
              - name: Open TODO issues
                uses: alstr/todo-to-issue-action@v4

  progress_tracking:
    file: docs/progress.md
    format: |
      ## YYYY-MM-DD
      - :white_check_mark: completed **OCR service** (#12)
      - :rocket: started **Inpaint service** (#13)
      - :warning: test coverage 72 % (below target)

  cli_commands:
    split_layer: |
      python -m app.cli split-layer <path/to/banner.png>
      # returns ./outputs/<uuid>/*png
    cleanup_old: |
      python -m app.cli cleanup --days 30

  logging:
    dest: data/app.log
    level: INFO
    rotation_mb: 10
    backups: 5
